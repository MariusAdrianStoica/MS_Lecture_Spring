package se.lexicon.dao.impl;

import org.springframework.stereotype.Component;
import se.lexicon.dao.TransactionDao;
import se.lexicon.exception.DataNotFoundException;
import se.lexicon.model.Transaction;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

@Component
public class TransactionDaoImpl implements TransactionDao {

    List<Transaction> storage = new ArrayList<>();

    @Override
    public Transaction create(Transaction transaction) {
        if (transaction == null) throw new IllegalArgumentException("Transaction was null");
        // todo: add more validations... transaction has Customer - if Customer is null
        storage.add(transaction);
        // we don't need to create ID - because id is autogenerated
        return transaction;
    }

    @Override
    public Optional<Transaction> findById(String id) {
        if (id == null) throw new IllegalArgumentException( "Id was null");

        return storage.stream()
                .filter(transaction -> transaction.getId().equals(id))
                .findFirst();
        //method returns an Optional -> so we can use this direct into return statement
    }

    @Override
    public Collection<Transaction> findAll() {
        return new ArrayList<>(storage);
    }

    @Override
    public void remove(String id) throws DataNotFoundException {

        findById(id).ifPresent(transaction -> storage.remove(transaction));
        throw new DataNotFoundException(" data not found Exception"); // a kind of else from IfPresent

    }
}
